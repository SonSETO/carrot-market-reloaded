

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}


model User {
  id Int @id @default(autoincrement())
  username String @unique
  email String? @unique
  password String?
  phone String? @unique
  github_id String? @unique
  avatar String? 
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  SMStoken SMSToken[]
  Product Product[]
}

model SMSToken{
  id Int @id @default(autoincrement())
  token String @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}

model Product{
  id Int @id @default(autoincrement())
  title String
  price Float
  description String
  photo String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
  userId Int
}

// user User @relation(fields: [userId], references: [id])
// userId Int 
// 프리즈마가 user를 바라보는게 아닌 실제 DB값에는 userID만이 정수형으로 저장이 된다. smstoken과 연결된 userId만 저장된다 즉 user의 릴레이션쉽은 smstoken의 외래키인 User를 바라보고 저장을 한다.
// 이 userId가 무엇인지 알려주기 위해, 그리고 userId 어디서 찾아야 할 지 알려줌 


// id Int @id @default(autoincrement()) 유저의 아이디를 자동적으로 1로 생성해준다 두 번째 사용자는 2, 세 번째 사용자는 3~~ 
// username String @unique @unique는 유일해야 하기 때문에 유니크를 첨부
// email은 필수가 아니기 때문에 옵셔널 선언 (핸드폰등 다른경로로 가입, 로그인을 할 수 있기 때문)


// model User {
//   id    Int     @id @default(autoincrement())
//   email String  @unique
//   name  String?
//   posts Post[]
// }

// model Post {
//   id        Int     @id @default(autoincrement())
//   title     String
//   content   String?
//   published Boolean @default(false)
//   author    User    @relation(fields: [authorId], references: [id])
//   authorId  Int
// }